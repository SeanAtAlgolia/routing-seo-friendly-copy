{"ast":null,"code":"import { history as historyRouter } from 'instantsearch.js/es/lib/routers';\nimport algoliasearch from 'algoliasearch/lite';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"angular-instantsearch\";\nimport * as i3 from \"@angular/common\";\n\nfunction SearchComponent_ng_template_8_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" No results found matching \");\n    i0.ɵɵelement(2, \"strong\");\n    i0.ɵɵtext(3, \". \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c0 = function () {\n  return [\"/\", \"detail\"];\n};\n\nfunction SearchComponent_ng_template_8_li_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 11);\n    i0.ɵɵelementStart(1, \"article\");\n    i0.ɵɵelementStart(2, \"a\", 12);\n    i0.ɵɵelementStart(3, \"h1\");\n    i0.ɵɵelement(4, \"ais-highlight\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"p\");\n    i0.ɵɵelement(6, \"ais-highlight\", 14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const hit_r5 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(3, _c0));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"hit\", hit_r5);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"hit\", hit_r5);\n  }\n}\n\nfunction SearchComponent_ng_template_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, SearchComponent_ng_template_8_div_0_Template, 4, 0, \"div\", 8);\n    i0.ɵɵelementStart(1, \"ol\", 9);\n    i0.ɵɵtemplate(2, SearchComponent_ng_template_8_li_2_Template, 7, 4, \"li\", 10);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const hits_r1 = ctx.hits;\n    i0.ɵɵproperty(\"ngIf\", hits_r1.length === 0);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", hits_r1);\n  }\n} // Returns a slug from the category name.\n// Spaces are replaced by \"+\" to make\n// the URL easier to read and other\n// characters are encoded.\n\n\nfunction getCategorySlug(name) {\n  return name.split(' ').map(encodeURIComponent).join('+');\n} // Returns a name from the category slug.\n// The \"+\" are replaced by spaces and other\n// characters are decoded.\n\n\nfunction getCategoryName(slug) {\n  return slug.split('+').map(decodeURIComponent).join(' ');\n}\n\nconst searchClient = algoliasearch('B1G2GM9NG0', 'aadef574be1f9252bb48d4ea09b5cfe5');\nexport let SearchComponent = /*#__PURE__*/(() => {\n  class SearchComponent {\n    constructor(route) {\n      this.route = route;\n      this.config = {\n        indexName: 'demo_ecommerce',\n        searchClient,\n        routing: {\n          router: historyRouter({\n            windowTitle({\n              category,\n              query\n            }) {\n              const queryTitle = query ? `Results for \"${query}\"` : 'Search';\n\n              if (category) {\n                return `${category} – ${queryTitle}`;\n              }\n\n              return queryTitle;\n            },\n\n            createURL({\n              qsModule,\n              routeState\n            }) {\n              const categoryPath = routeState.category ? `${getCategorySlug(routeState.category)}/` : '';\n              const queryParameters = {};\n\n              if (routeState.query) {\n                queryParameters.query = encodeURIComponent(routeState.query);\n              }\n\n              if (routeState.page !== 1) {\n                queryParameters.page = routeState.page;\n              }\n\n              if (routeState.brands) {\n                queryParameters.brands = routeState.brands.map(encodeURIComponent);\n              }\n\n              const queryString = qsModule.stringify(queryParameters, {\n                addQueryPrefix: true,\n                arrayFormat: 'repeat'\n              });\n              return `/search/${categoryPath}${queryString}`;\n            },\n\n            parseURL: () => {\n              const {\n                params,\n                queryParams\n              } = this.route.snapshot;\n              const category = getCategoryName(decodeURIComponent(params.category || ''));\n              const {\n                query = '',\n                page,\n                brands = []\n              } = queryParams; // brands is not an array when there's a single value.\n\n              const allBrands = [].concat(brands);\n              return {\n                query: decodeURIComponent(query),\n                page,\n                brands: allBrands.map(decodeURIComponent),\n                category\n              };\n            }\n          }),\n          stateMapping: {\n            stateToRoute(uiState) {\n              return {\n                query: uiState.demo_ecommerce.query,\n                page: uiState.demo_ecommerce.page,\n                brands: uiState.demo_ecommerce.refinementList && uiState.demo_ecommerce.refinementList.brands,\n                category: uiState.demo_ecommerce.menu && uiState.demo_ecommerce.menu.categories\n              };\n            },\n\n            routeToState(routeState) {\n              return {\n                demo_ecommerce: {\n                  query: routeState.query,\n                  page: routeState.page,\n                  menu: {\n                    categories: routeState.category\n                  },\n                  refinementList: {\n                    brand: routeState.brands\n                  }\n                }\n              };\n            }\n\n          }\n        }\n      };\n    }\n\n  }\n\n  SearchComponent.ɵfac = function SearchComponent_Factory(t) {\n    return new (t || SearchComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute));\n  };\n\n  SearchComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SearchComponent,\n    selectors: [[\"app-search\"]],\n    decls: 11,\n    vars: 1,\n    consts: [[3, \"config\"], [1, \"search-panel\"], [1, \"search-panel__filters\"], [\"attribute\", \"categories\"], [1, \"search-panel__results\"], [1, \"searchbox\"], [\"placeholder\", \"\"], [1, \"pagination\"], [4, \"ngIf\"], [1, \"ais-Hits-list\"], [\"class\", \"ais-Hits-item\", 4, \"ngFor\", \"ngForOf\"], [1, \"ais-Hits-item\"], [3, \"routerLink\"], [\"attribute\", \"name\", 3, \"hit\"], [\"attribute\", \"description\", 3, \"hit\"]],\n    template: function SearchComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ais-instantsearch\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelement(3, \"ais-menu\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 4);\n        i0.ɵɵelementStart(5, \"div\", 5);\n        i0.ɵɵelement(6, \"ais-search-box\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"ais-hits\");\n        i0.ɵɵtemplate(8, SearchComponent_ng_template_8_Template, 3, 2, \"ng-template\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 7);\n        i0.ɵɵelement(10, \"ais-pagination\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"config\", ctx.config);\n      }\n    },\n    directives: [i2.NgAisInstantSearch, i2.ɵk, i2.ɵq, i2.ɵh, i3.NgIf, i3.NgForOf, i1.RouterLinkWithHref, i2.ɵi, i2.ɵm],\n    styles: [\".header[_ngcontent-%COMP%]{display:flex;align-items:center;min-height:50px;padding:.5rem 1rem;background-image:linear-gradient(to right,#c3002f,#dd0031);color:#fff;margin-bottom:1rem}.header[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{color:#fff;text-decoration:none}.header-title[_ngcontent-%COMP%]{font-size:1.2rem;font-weight:400}.header-title[_ngcontent-%COMP%]:after{content:\\\" \\\\25b8  \\\";padding:0 .5rem}.header-subtitle[_ngcontent-%COMP%]{font-size:1.2rem}.container[_ngcontent-%COMP%]{max-width:1200px;margin:0 auto;padding:1rem}.search-panel[_ngcontent-%COMP%]{display:flex}.search-panel__filters[_ngcontent-%COMP%]{flex:1}.search-panel__results[_ngcontent-%COMP%]{flex:3}.searchbox[_ngcontent-%COMP%]{margin-bottom:2rem}.pagination[_ngcontent-%COMP%]{margin:2rem auto;text-align:center}\"]\n  });\n  return SearchComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}